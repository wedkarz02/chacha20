// Copyright (c) 2023 Pawe≈Ç Rybak
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Package util implements utilities used in the chacha20 package.
package util

import (
	"crypto/rand"
	"errors"
	"io"
)

// Size of the nonce in the 96-bit variant.
const NONCE_SIZE = 12

// Error returned if the nonce seeding fails.
var ErrSeed = errors.New("nonce seeding failed")

// Nonce structure contains information about
// random bytes generated for the encryption.
type Nonce struct {
	Bytes [NONCE_SIZE]byte
}

// NewNonce returns a randomly seeded nonce.
func NewNonce() (*Nonce, error) {
	n := Nonce{}

	if err := n.seed(); err != nil {
		return nil, err
	}

	return &n, nil
}

// Seed initializes the nonce with random bytes
// generated by io.ReadFull and rand.Reader.
func (n *Nonce) seed() error {
	if _, err := io.ReadFull(rand.Reader, n.Bytes[:]); err != nil {
		return ErrSeed
	}

	return nil
}
